/** 
 * CouchDB Authentication module for Raccoon
 * 
 */
(function(){

this.Auth = new Class({

	Implements:[Options],
	options:{
	  dboptions:{
		cache:false,
		adapter:'couchdb',
		host: 'http://localhost',
		port: '5984',
		db: 'users',
		username: '',
		password: ''
	  },
 	  cookieExpiry: 4 //hours
	},
	initialize: function(options){
		this.setOptions(options);
		this.db = new CouchDB(this.options.dboptions);
		this.User = new User(this.options.dboptions);
		//response.write(JSON.encode(request.cookie.Auth));

		if(request.cookie["Auth"]) {
			var f = request.cookie["Auth"];
			if(Raccoon.Cache.get('couchdb.cacheusers')) {
			var x = Raccoon.Cache.File(Raccoon.Cache.get(f),"r",false,false,false);
			x=JSON.decode(x)[0];
			if(f) this.autologin(x.user,'auto');
			else this.logout();
			}
		} 
		return this;
	},
	doAuth: function(userdata) {
		//response.write(userdata);
		this.User.sets(userdata);
		this.User.set('auth',true);
		this.authenticate(userdata);
		return this;	
	},
	'protected autologin': function(data,method){
		switch(method) {
			case 'auto':
			var userdata = this.db.view('user','email',{key:data,include_docs:true});
			var doc = JSON.decode(userdata);
			//response.write(JSON.encode(doc));
			if(doc) {
			if(doc.rows[0]) this.doAuth(doc.rows[0].doc);
			}
			break;
			case false:default:
			break;
		}
	},
	'protected authenticate':function(data) {
		if(typeOf(data) == "string") data = JSON.decode(data);
		this.isLogged = true;
		var traw = data.email+data._rev+data.password;
		var token = Util.sha1(traw);
		var id = data._id;
		data.authKey = token;
		var now = new Date();	
		var hours = now.getHours()+this.options.cookieExpiry;
		var nd = new Date().setHours(hours);
		nd = new Date(nd);
		var expires = nd;
		response.cookie("Auth", token, expires,'/');
		if(Raccoon.Cache.get('couchdb.cacheusers')) {
			var file = [[Raccoon.Cache.get('couchdb.ucpath'),token].join('/'),'json'].join('.');
			var t = new Date().getTime();
			var objy = {'hash':token,'user':data.email,'time':t};
			var f = Raccoon.Cache.get(token);
			if(!f || typeOf(f) == "null") f = file;
			arr = [];
			arr.push(objy)
			Raccoon.Cache.File(f,"w",JSON.encode(arr),false,false);
		}
		this.getUser().set('nextAuth',token);
		return this; 
	},
	logout:function() {
		var now = new Date();	
		var minutes = now.getHours()-4;
		var nd = new Date().setHours(minutes);
		nd = new Date(nd);
		var expires = nd;
		var token = Raccoon.Cache.get(request.cookie.Auth);
		this.User.set('auth',false);
		this.User = new User();
		if(token && token != "undefined") new File(token).remove();
		response.cookie("Auth", null, expires);
	},
	'protected getAllUsers':function() {
		return this.db.request('GET','_all_docs',{include_docs:true});
	},
	get:function(key) {
		return this[key];
	},
	getUser:function(){
		return this.User;
	},
	getAuth:function(){
		return this.User.get('auth');
	},
	checkUser: function(data){
		this.docs = this.db.view('user','x',{key:data});
	}

});

this.User = new Class({
	initialize:function(dbopt) {
		this.auth=false;
		this.roles=["visitor"];
		return this;
	},
	get:function(key) {
		return this[key];
	},
	set:function(key,value) {
		this[key] = value;
		return this;
	},
	save:function() {
		var conn = Raccoon.Auth.db;
		var newUser = Object.from(Object.keys(this),Object.values(this));
		var id = newUser._id;
		var rev = newUser._rev;
		delete newUser.caller;
		delete newUser._id;
		delete newUser.auth;
		if(Raccoon.Cache.get('couchdb.cacheusers')) {
		var f = new File(Raccoon.Cache.get(String.from(newUser.authKey)));
		if(f.exists()) f.remove();
		}
		delete newUser.authKey;
		newUser.authKey = newUser.nextAuth;
		delete newUser.nextAuth;
		var req = conn.request('PUT',String.from(id),{rev:String.from(rev)},newUser);
		var result = Object.keys(req.body);
		if(result.contains("ok")) { this.set('authKey',newUser.authKey); this.set('_rev',req.body.rev); return this; }
		else if(result.contains("error")) { return result.body; }
		else return this;
	},
	sets:function(obj) {
		switch(typeOf(obj)) {
			case "array":
			obj.each(function(value,key) {
			this.set(key,value);
			});
			break;
			case "object":
			try {
				for (var key in obj) {
					this.set(key, obj[key]);
				}
			} catch(err) { response.write(JSON.encode(err)); }
			break;
			case "string":default:
			obj = JSON.decode(obj);
			this.sets(obj);
			break;
		}
	return this;
	}
});

})();
